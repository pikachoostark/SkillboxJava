3.2: Методы
1) Модификатор доступа:
    - public;
    - private;
    - protected;
    - —;
2) Ключевое слово "static":
    - static;
    - —;
3) Тип возвращаемого значения или ключевое слово "void";
4) Имя метода;
    * должно отражать суть метода;
    * пишется camelCase-ом;
5) Передаваемые значения (в скобках);

! 4 + 5 = Сигнатура метода
Метод - фрагмент программного кода, который можно вызвать по имени. При вызове этот код исполняется.

* метод main должен присутствовать обязательно - с него начинается выполнение кода.
===================================================================================================================
===================================================================================================================
===================================================================================================================
3.4: Возвращаемые значения
Последовательность вызова методов - стек выполнения методов;
===================================================================================================================
===================================================================================================================
===================================================================================================================
3.5: Классы и объекты
Класс - некая абстракция, описывающая объект предметной области, его параметры и способы взаимодействия с ним.
===================================================================================================================
===================================================================================================================
===================================================================================================================
3.6: Конструкторы
Конструкторы - специальные фрагменты кода, которые предназначены для инициализации каких-то данных при создании объекта
===================================================================================================================
===================================================================================================================
===================================================================================================================
3.7: Перегрузка методов:
Перегрузка - свойство, позволяющее создавать одноимённые методы с разными сигнатурами
    * имеет значение порядок параметров, но не имеет значение их название;
===================================================================================================================
===================================================================================================================
===================================================================================================================
Когда использовать static?

Так как static-переменные и методы «принадлежат» классу, то значения в них одно на все созданные объекты,
а переменные без static имеют отдельное значение для каждого созданного объекта.

Например, если написано: «Переменную, которая будет содержать общую массу всех товаров, добавленных в корзину» —
это указание на каждую отдельную корзину, так как каждая корзина имеет свой набор товаров и свою массу,
а значит, вес корзины и список товаров не должны иметь static-модификатор.

В другом случае, если будет указано: «Вес всех товаров во всех корзинах», то это значение одно на все корзины,
и тут возможно создать static-переменную и в неё суммировать каждый добавленный товар,
так как переменная одна на все корзины, переменная будет накапливать сумму веса всех корзин.