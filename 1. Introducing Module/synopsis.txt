1.2: Какие бывают программы
- Приложения (applications, apps)
- Программы (applications, apps)
        - это чаще всего отдельная программа (браузер Opera)
- Программное обеспечение, ПО, софт (software)
        - совокупность приложений, рассматриваемых совместно (ПО на сервере)
===================================================================================================================
1. Веб-приложение: лендинг (веб-страница), интернет-магазин, социальная сеть, информационный портал, онлайн-сервер,
                   LMS-системы (learning management system - система управления обучением)
                   CMS-системы (content management system - система управления сайтом)
                   CRM-системы (customer relationship management - система управления взаимоотношениями с клиентом)
2. Мобильные приложения (Android, iOS, etc.)
3. Desktop-приложения (для ПК)
4. Консольные приложения (запускаемые и работающие в командной строке)
    * не имеют графического интерфейса
5. Системное и встроенное (embedded) ПО (ОС, разная техника: коптеры, роботы, принтеры, мед. техника, etc.)
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.3: Веб-приложения. Frontend и Backend
- Ввели ссылку веб-страницы;
- На сервер Google был отправлен запрос;
- На сервере сформировался код страницы;
- Код страницы был отправлен с сервера обратно к нам;
- Браузер преобразовал полученный код в привычную нам веб-страницу и отобразил её
===================================================================================================================
Web-инспектор - инструмент для просмотра исходного кода страницы (для работы с Web-приложениями)
Frontend - часть веб-приложения, работающая в браузере (на клиенте)
Frontend представлен, в основном, тремя технологиями:
    1. HTML (HyperText Markup Language - язык гипертекстовой разметки) - вёрстка веб-страниц;
    2. CSS (Cascading Style Sheets - каскадные таблицы стилей)         - стили (дизайн) веб-страниц;
    3. JS (JavaScript)                                                 - интерактивность;

Backend - часть веб-приложения, работающая на сервере
    1. Серверный код - Java, Python, PHP, ...;
    2. База данных (БД) - MySQL, PostgreSQL, ...;

Web-приложение может не содержать frontend или backend.
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.4: Цели и области применения Java
ПРИЛОЖЕНИЯ, РАЗРАБАТЫВАЕМЫЕ НА JAVA
1) Backend web-приложений (Сбербанк Онлайн, АльфаКлик (ЛК АльфаБанк), PayPal, Яндекс.Маркет, МойСклад, VoxImplant)
    * Java считается одним из самых безопасных ЯП, поэтому часто используется в браузерах
2) Desktop приложения (Minecraft JE, Apache OpenOffice (частично), IntelliJ IDEA, SAP
3) Мобильные Android-приложения
    * Графический интерфейс OS Android в т.ч. написан на Java
    * Сейчас Android-приложения часто разрабатываются на Kotlin - ЯП, основанном на Java
4) Сервисы и утилиты (AWS (Amazon Web-Services) (многие),
                      Apache Hadoop (многосерверная ФС) - ключевая технология BigData,
                      Jenkins (настройка непрерывной интеграции) - инструмент для разработки,
                      Apache Lucene (поисковый движок)
...
===================================================================================================================
СФЕРЫ, В КОТОРЫХ ИСПОЛЬЗУЕТСЯ JAVA
1) FinTech: банки и платёжные системы;
2) Телеком: хостинги, телефония;
3) Наука и медицина, биоинформатика;
...
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.5: Как выглядит программный код
Синтаксис ЯП - совокупность правил написания программного кода на данном языке программирования.
Пример 1:
            if (count < 100) {
                showIcon(count);
            } else {
                showIcon("100+");
            }
  * В Java все строки должны заканчиваться на точку с запятой;
Пример 2:
            int sum = 0;

            List<Item> items = shoppingCart.getItems();
            for(Item item : items) {
                sum = sum + item.getPrice() * item.getCount();
            }

            showMessage("Общая стоимость товаров в Вашей корзине: " + sum + " руб.");

https://www.jetbrains.com/ru-ru/idea/download/ - Страница скачивания среды разработки IntelliJ IDEA.
https://skillbox.ru/media/base/kak_ustanovit_jdk_i_sredu_razrabotki_intellij_idea/
        - Инструкция по установке среды разработки IntelliJ IDEA под все операционные системы.
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.6: Установка среды разработки
Среды разработки (IDE - Integrated Development Environment - интегрированная среда разработки):
    - JetBrains IntelliJ IDEA (Community Edition)
    - Eclipse
    - Apache NetBeans

 * JDK - Java Development Kit - специальное ПО, необходимое для разработки на Java
    - Oracle OpenJDK
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.7: Пишем простое приложение
Два фактора качества ПО:
    1) Работоспособность - программа должна выполнять ту задачу, для которой она создавалась.
    2) Поддерживаемость - программа должна быть написана таким образом, чтобы в неё было легко вносить изменения.
        * Грамотный нейминг - наименование всего, что есть в программе;
===================================================================================================================
В директории out содержится файл *.class, содержащий байт-код.
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.8: Упаковываем приложение в один файл
*.jar - Java Archive - упакованный код, который можно запускать/подключать к другим проектам

File -> Project Structure... -> Artifacts -> JAR (From modules with dependencies)
    * Установить галочку [+] Include in project build для автоматической пересборки файла после изменений.
    * Запуск из консоли: java.exe -jar out/DateTime.jar
===================================================================================================================
===================================================================================================================
===================================================================================================================
1.9: Особенности языка Java
1) Компилируемость;
    * Компиляция: Код на Java (*.java) -> Байт-код (*.class)
    * JVM (Java Virtual Machine) - Виртуальная машина Java
        - специальная программа, которая исполняет байт-код и позволяет ЯП Java быть кросс-платформенным.
2) Кросс-платформенность;
    * На Android не запустится, если код связан с графическим интерфейсом, т.к. он по-другому устроен
3) Надёжность;
    * Неработающий код не скомпилируется
4) Безопасность;
    * Постоянно выходят патчи, исправляющие уязвимости
    * Высокая предсказуемость работы кода и надёжность языка
5) Консервативность (сквозная обратная совместимость)
    - то, что написано на старых версиях языка всегда запустится на более новых версиях
6) Современность
    * Постоянные обновления
    * Принципы языка часто заимствуются другими языками (C#, PHP (типизация), JavaScript)
        ** Раньше JavaScript назывался LiveScript

Версии языка Java:
JDK Beta          - 1995
J2SE 5.0          - 2004 - 2015
Java SE 8 (LTS)   - 2014 - 2019-2030
    - глобальное обновление, добавившее функциональную парадигму и позволившее языку конкурировать с популярным
      на тот момент языком Scala.
    * LTS - Long-Term Support - долговременная поддержка (наиболее стабильные версии)
    * До сих пор используется, хотя с 2019 года поддержка начала частично сокращаться
Java SE 11 (LTS)  - 2018 - 2024-2027
Java SE 16 - 2021 - 2021
Java SE 17 (LTS)  - 2021 - 2030

